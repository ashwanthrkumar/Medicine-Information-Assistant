import streamlit as st
import google.generativeai as genai
import json

# Streamlit page configuration
st.set_page_config(page_title="Medicine Information Assistant", page_icon="ðŸ’Š", layout="centered")

# Function to configure Gemini API with the provided API key
def configure_gemini_api(api_key):
    genai.configure(api_key=api_key)

# Replace with your actual Gemini API key
API_KEY = 'x'
configure_gemini_api(API_KEY)

# Function to get a response from Gemini AI using the medicine prompt
# Function to get a response from Gemini AI using the medicine prompt
def get_gemini_response(medicine):
    input_prompt = f"""
    You are a knowledgeable medical assistant. Given the medicine name {medicine}, 
    please provide the following details:
    1. Uses of the medicine.
    2. Side effects.
    3. What conditions does it cure or help treat?
    4. When should this medicine be taken (e.g., before or after meals, or at a specific time of day)?
    Please provide the information in an easy-to-read format for a general audience.
    """
    
    model = genai.GenerativeModel('gemini-pro')
    
    try:
        response = model.generate_content(input_prompt)
        
        # Attempt to access the response text
        if hasattr(response, 'text'):
            return response.text
        else:
            raise ValueError("No valid text response was returned by the Gemini model.")

    except ValueError as e:
        # Handling the specific error where the text field is missing
        st.warning(f"Error: {str(e)}")
        st.warning("It seems that the response generated by the AI may have been flagged for containing harmful or inappropriate content. Please try again with a different input.")
    
    except Exception as e:
        # Catch any other exceptions
        st.error(f"An unexpected error occurred: {str(e)}")
        st.error("Please try again later or contact support if the issue persists.")


# Streamlit UI
st.title("Medicine Information Assistant ðŸ’Š")
st.write("Enter the name of a medicine to get details about its uses, side effects, what it cures, and when to take it.")

# User input for medicine name
medicine_name = st.text_input("Medicine Name")

# Submit button
if st.button("Get Details"):
    if medicine_name:
        # Get response from Gemini AI
        response = get_gemini_response(medicine_name)
        
        try:
            st.subheader(f"Details for {medicine_name.capitalize()}:")
            st.write(response)  # Display the formatted response
        except json.JSONDecodeError:
            st.error("Error in getting the medicine details. Please try again.")
    else:
        st.error("Please enter a valid medicine name.")

